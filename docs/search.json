[{"path":"https://amslala.github.io/regtools/articles/h-functions.html","id":"why","dir":"Articles","previous_headings":"","what":"Why?","title":"Simulate individual-level data","text":"research fields, individual-level data regulated strict confidentiality agreements. Norway, sensitive health sociodemographic individual-level data shared used outside secure platforms, TSD (Services sensitive data). type disclosure control protects privacy study participants, can also pose significant challenge reproducibility transparency practices research. Although code sharing gained popularity, code appropriately evaluated (potentially reused) original analytic data unavailable. One possible solution challenges associated using confidential data create synthetic simulated data similar structure statistical characteristics original data. number excellent R packages dedicated creating synthetic datasets existing data, synthpop, faux simpop. resulting synthetic data high-fidelity aim maintain internal statistical characteristics relationships variables. However, many features packages rely full access original individual-based data. Additionally, crucial remember synthetic data based existing datasets inherently private (source , Alan Turing Institute) can vulnerable data leaks attacks. line overarching objectives regtools, synthetic_data() function aims help researchers navigate challenges associated working confidential individual-level data Norway creating synthetic datasets without need pre-existing data. function require use pre-existing data, also attempt capture internal statistical characteristics relationships variables. However, synthetic_data() still particularly useful researchers working Norwegian health sociodemographic datasets, produces synthetic datasets structure semantics resembling found actual individual-level data (e.g NPR, KUHR, SSB). Consider features synthetic_data() function, identified three main use cases: Easier code sharing: type synthetic datasets allow researchers simultaneously share analytically code data without privacy concerns. turn, reviewers collaborators can successfully execute code, facilitating correct evaluation potential reuse. Educational purposes: data generated synthetic_data() function also provides low-barrier low-risk way exploring manipulating data, making ideal training onboarding new researchers. Development without data access: data availability delayed possible access reasons (e.g. preregistration), researchers can still prepare analytic scripts advance.","code":""},{"path":"https://amslala.github.io/regtools/articles/h-functions.html","id":"how","dir":"Articles","previous_headings":"","what":"How?","title":"Simulate individual-level data","text":"Broadly speaking, synthetic_data() function ability create three different types datasets meet certain minimum characteristics: Diagnostic (health) data: includes least unique personal identifier (ID), date diagnostic event, diagnosis code (ICD-10 ICP-2). instance, datasets NPR (Norwegian Patient Registry) KUHR (Norwegian Control Payment Health Reimbursements Database). Time-invariant data: Including least unique personal identifier (ID) sociodemographic variables date birth, immigration background, etc. Time-varying data: Encompassing least unique personal identifier (ID), date, sociodemographic variables place residence marital status. type information usually updated quarterly yearly administrative registries. Considering complexity variability registry data, datasets created synthetic_data() likely differ certain degree actual data delivered NPR SSB (Statistics Norway). Even structure synthetic datasets varies original data, simulated datasets serve useful starting point researchers can modify tailor suit specific needs. Furthermore, synthetic_data() function also keeps track important metadata associated data generation process. way, possible researchers produce consistent datasets efficient manner.","code":""},{"path":"https://amslala.github.io/regtools/articles/h-functions.html","id":"practical-example","dir":"Articles","previous_headings":"How?","what":"Practical example","title":"Simulate individual-level data","text":"successfully generate three different synthetic datasets describe section , need provide information population size classifications want include different datasets. whole description argument please consult synthetic_data() function’s documentation. population_size parameter used ensure size datasets similar one encounter working real data, also generating necessary number diagnostic cases given prevalence incidence rate. code , population size specified 15,000 period prevalence .06 (6%). Therefore, 900 relevant cases data. purpose making synthetic datasets realistic possible, include additional number non-relevant cases (complete specified population size). Additionally, individuals diagnostic dataset can random number repeated diagnostic events either year different years. arguments family_codes, pattern, diag_years, sex_vector, y_birth, invariant_codes, varying_query used populate diagnostic, time-invariant time-varying information relevant 900 cases. remainder arguments used generate filler non-relevant cases. cases want specify column names codes invariant time-varying variables (invariant_codes, invariant_codes_filler, varying_codes, varying_codes_filler), however function also supports looking classification codes SSB’s Statistical Classifications Codelists (Klass). varying_query invariant_queries options require internet connection retrieve specified classifications codelists SSB. purpose facilitating transparency reproducibility, synthetic_data() function outputs list two named lists: “datasets” “metadata”. Within first list (“datasets”), find diagnostic, time-invariant time-varying data separate data frames. second list (“metadata”) includes useful metadata like exact call used generate datasets, well values argument used function call. Let’s say researcher looking co-occurrence two particular family codes (ICD-10 F8 F7) population interest. However, delay data access. However, using diagnostic dataset generated previous step functions regtools, possible prepare analytic scripts access actual data project.","code":"dummy_data <- regtools::synthetic_data(   population_size = 15000,   prefix_ids = \"P000\",   length_ids = 6,   family_codes = c(\"F84\"),   pattern = \"increase\",   prevalence = .060,   diag_years  = c(2012:2020),   sex_vector = c(0, 1),   y_birth = c(2010:2018),   filler_codes = \"F\",   filler_y_birth = c(2000:2009),   invariant_codes = list(\"innvandringsgrunn\" = c(\"ARB\", \"NRD\", \"UKJ\")),   invariant_codes_filler = list(\"innvandringsgrunn\" = c(\"FAMM\", \"UTD\")),   varying_query = \"fylke\",   seed = 123)  #> ℹ Creating relevant cases with the following characteristics: #> • Population size = 15000 #> • Prefix IDs = P000 #> • Length IDs = 6 #> • Diagnostic relevant codes = F84 #> • Pattern of incidence = increase #> • Prevalence = 0.06 #> • Diagnostic years = 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, and 2020 #> • Incidence = #> • Coding sex = 0 and 1 #> • Relevant years of birth = 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, and #> 2018 #> ℹ Creating filler cases with the following characteristics: #> • Filler diagnostic codes = F #> • Filler years of birth = 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, #> and 2009 #> • Pattern for filler incidence = 'random' #> • Number of filler cases to generate = 14100 #> ! This process can take some minutes... #> ✔ Succesfully generated diagnostic, time-varying and time-invariant datasets! str(dummy_data$datasets) #> List of 3 #>  $ invar_df: tibble [15,000 × 4] (S3: tbl_df/tbl/data.frame) #>   ..$ id               : chr [1:15000] \"P000000037\" \"P000000183\" \"P000000395\" \"P000000431\" ... #>   ..$ sex              : Factor w/ 2 levels \"0\",\"1\": 2 2 1 1 2 2 2 2 1 2 ... #>   ..$ y_birth          : int [1:15000] 2002 2002 2005 2000 2003 2007 2012 2009 2008 2004 ... #>   ..$ innvandringsgrunn: chr [1:15000] \"FAMM\" \"UTD\" \"UTD\" \"UTD\" ... #>  $ var_df  : tibble [135,000 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ id          : chr [1:135000] \"P000000037\" \"P000000037\" \"P000000037\" \"P000000037\" ... #>   ..$ year_varying: int [1:135000] 2012 2013 2014 2015 2016 2017 2018 2019 2020 2012 ... #>   ..$ varying_code: chr [1:135000] \"34\" \"34\" \"34\" \"34\" ... #>  $ diag_df : tibble [60,104 × 3] (S3: tbl_df/tbl/data.frame) #>   ..$ id       : chr [1:60104] \"P000000651\" \"P000000651\" \"P000000651\" \"P000000651\" ... #>   ..$ code     : chr [1:60104] \"F842\" \"F928\" \"F492\" \"F393\" ... #>   ..$ diag_year: int [1:60104] 2019 2012 2014 2014 2017 2019 2016 2012 2018 2017 ... dummy_diag_df <- dummy_data$datasets$diag_df str(dummy_data$metadata) #> List of 2 #>  $ call     : language regtools::synthetic_data(population_size = 15000, prefix_ids = \"P000\",      length_ids = 6, seed = 123, family_co| __truncated__ ... #>  $ arguments:List of 15 #>   ..$ population_size       : num 15000 #>   ..$ prefix_ids            : chr \"P000\" #>   ..$ length_ids            : num 6 #>   ..$ seed                  : num 123 #>   ..$ family_codes          : language c(\"F84\") #>   ..$ pattern               : chr \"increase\" #>   ..$ prevalence            : num 0.06 #>   ..$ diag_years            : language c(2012:2020) #>   ..$ sex_vector            : language c(0, 1) #>   ..$ y_birth               : language c(2010:2018) #>   ..$ filler_codes          : chr \"F\" #>   ..$ filler_y_birth        : language c(2000:2009) #>   ..$ invariant_codes       : language list(innvandringsgrunn = c(\"ARB\", \"NRD\", \"UKJ\")) #>   ..$ invariant_codes_filler: language list(innvandringsgrunn = c(\"FAMM\", \"UTD\")) #>   ..$ varying_query         : chr \"fylke\" # Output in console has been silenced for this example   dates <- as.character(c(2012:2018))  diag_df_first <- dummy_diag_df |>    regtools::curate_diag(     code_col = \"code\",      date_col = \"diag_year\",      log_path = l_file)  diag_f8_year <- dates |>    purrr::map(\\(x) regtools::filter_diag(     diag_df_first,      pattern_codes = \"F8\",      code_col = \"code\",      date_col = \"y_diagnosis_first\",      diag_dates = x,      log_path = l_file)) |>    purrr::map(\\(x) dplyr::select(x, \"id\"))   diag_f7 <- dummy_diag_df |>    regtools::filter_diag(     pattern_codes = \"F7\",      code_col = \"code\",      log_path = l_file)  intersect_f8_f7 <- purrr::map(diag_f8_year, \\(x) dplyr::intersect(x, diag_f7[1])) |>    purrr::map(\\(x) nrow(x))   names(intersect_f8_f7) <- dates  intersect_f8_f7_df <- purrr::map_df(intersect_f8_f7, ~as.data.frame(.x), .id=\"year\") |>   dplyr::rename(\"count\" = \".x\") regtools::plot_rates(   intersect_f8_f7_df,    date_col = \"year\",    grouping_var = \"year\",    rate_col = \"count\",    plot_type = \"lollipop\",   percent = FALSE,    palette = \"viridis\",    plot_title = \"New yearly F8 diagnoses\",     y_name = \"Count\",    coord_flip = TRUE) +    ggplot2::labs(subtitle = \"Individuals with a previous or future F7 diagnosis\") +   ggplot2::theme(legend.position = \"none\")"},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"package-datasets","dir":"Articles","previous_headings":"","what":"Package datasets","title":"Introduction to regtools","text":"exemplify main functions package, included couple illustrative simulated datasets. datasets also used examples specified functions’ documentation. Note: included datasets large size parallel size normally encounter working real microdata. dataset diag_df tibble simulated individual-level diagnostic data. documented ?diag_df dataset var_df tibble simulated individual-level time-varying data. documented ?var_df dataset invar_df tibble simulated individual-level time-invariant data. documented ?invar_df datasets created using simulate_dataset() function included package. exact code used create can found folder /data-raw package’s source code. Besides main diagnostic sociodemographic datasets included package, also two datasets included facilitate running examples: kommuner_2016: data.frame including municipality codes Norway valid 2016. linked_df: tibble including linked diagnostic, time-invariant time-varying data.","code":"str(diag_df) #> tibble [120,256 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id       : chr [1:120256] \"P000000704\" \"P000000704\" \"P000000704\" \"P000000704\" ... #>  $ code     : chr [1:120256] \"F4522\" \"F305\" \"F65\" \"F840\" ... #>  $ diag_year: int [1:120256] 2016 2020 2014 2017 2014 2017 2018 2020 2016 2013 ... str(var_df) #> tibble [270,216 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id          : chr [1:270216] \"P000000037\" \"P000000037\" \"P000000037\" \"P000000037\" ... #>  $ year_varying: int [1:270216] 2012 2013 2014 2015 2016 2017 2018 2019 2020 2012 ... #>  $ varying_code: chr [1:270216] \"0815\" \"0815\" \"0815\" \"0815\" ... str(invar_df) #> tibble [30,024 × 4] (S3: tbl_df/tbl/data.frame) #>  $ id               : chr [1:30024] \"P000000037\" \"P000000052\" \"P000000059\" \"P000000111\" ... #>  $ sex              : Factor w/ 2 levels \"0\",\"1\": 1 1 1 2 2 1 2 1 1 1 ... #>  $ y_birth          : int [1:30024] 2008 2000 2007 2003 2000 2003 2009 2005 2004 2002 ... #>  $ innvandringsgrunn: chr [1:30024] \"FAMM\" \"FAMM\" \"FAMM\" \"FAMM\" ..."},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"general-features","dir":"Articles","previous_headings":"","what":"General features","title":"Introduction to regtools","text":"majority functions create log files encourage reproducibility consistency across research projects. Additionally, function provides clear console feedback executes important operations (filter, select, join, etc) next examples, can initialize temporary log file:","code":"log_file <- tempfile() cat(\"Vignette log file\", file = log_file)"},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"data-reading-and-validation","dir":"Articles","previous_headings":"","what":"Data reading and validation","title":"Introduction to regtools","text":"Generally, researchers working individual level registry data (Norway) find datasets divided (delivered) three different categories: Diagnostic data: normally containing unique personal identifier (id), date diagnostic even, diagnosis code (ICD-10 ICP-2). instance, datasets NPR (Norwegian Patient Registry) KUHR. Time-invariandata: sociodemographic data date birth, immigration background, etc. Time-varying data: sociodemographic data place residence marital status. type information usually updated quarterly yearly administrative registries. Assuming researcher want compute sex-stratified prevalence rates certain diagnosis, least need diagnostic dataset time-invariant dataset (including sex). functions read_demo_data() read_diag_data() check dataset’s minimum requirements, well giving quick summary dataset’s structure. need specify column names corresponding id date variables (see function documentation info). Note: read functions check minimum requirements, real datasets can contain additional variables/columns. example, NPR sometimes includes sex age information individual diagnostic dataset.","code":"diag_csv <- system.file(\"extdata\", \"diag_data.csv\", package = \"regtools\")  diag_data_validated <- regtools::read_diag_data(diag_csv,                                                  id_col = \"id\",                                                  date_col = \"diag_year\",                                                  log_path = log_file) #> Reading C:/Users/ALMS/AppData/Local/Temp/RtmpqY4opu/temp_libpath5c8c26ed8fa/regtools/extdata/diag_data.csv file... #> ✔ Succesfully read file: C:/Users/ALMS/AppData/Local/Temp/RtmpqY4opu/temp_libpath5c8c26ed8fa/regtools/extdata/diag_data.csv #> Checking column requirements: #> ✔ ID column #> ✔ Code column #> ✔ Date column #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully read and columns validated #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ Number of rows: 120256. Number of columns: 3. #>  #>  #> 'data.frame':    120256 obs. of  3 variables: #>  $ id       : chr  \"P000000704\" \"P000000704\" \"P000000704\" \"P000000704\" ... #>  $ code     : chr  \"F4522\" \"F305\" \"F65\" \"F840\" ... #>  $ diag_year: int  2016 2020 2014 2017 2014 2017 2018 2020 2016 2013 ... demo_csv <- system.file(\"extdata\", \"invar_data.csv\", package = \"regtools\")  demo_data_validated <- read_demo_data(demo_csv,                                        data_type = \"t_invariant\",                                       id_col = \"id\",                                        log_path = log_file) #> Reading C:/Users/ALMS/AppData/Local/Temp/RtmpqY4opu/temp_libpath5c8c26ed8fa/regtools/extdata/invar_data.csv file... #> ✔ Succesfully read file: C:/Users/ALMS/AppData/Local/Temp/RtmpqY4opu/temp_libpath5c8c26ed8fa/regtools/extdata/invar_data.csv #> Checking column requirements: #> ✔ ID column #> ✔ Date column #> Data type: time invariant. Checking requirements... #> ✔ No duplicate IDs #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully read and columns validated #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ Number of rows: 30024. Number of columns: 4. #> ℹ Unique IDs in dataset: 30024. #>  #> 'data.frame':    30024 obs. of  4 variables: #>  $ id               : chr  \"P000000037\" \"P000000052\" \"P000000059\" \"P000000111\" ... #>  $ sex              : int  0 0 0 1 1 0 1 0 0 0 ... #>  $ y_birth          : int  2008 2000 2007 2003 2000 2003 2009 2005 2004 2002 ... #>  $ innvandringsgrunn: chr  \"FAMM\" \"FAMM\" \"FAMM\" \"FAMM\" ..."},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"data-filtering","dir":"Articles","previous_headings":"","what":"Data filtering","title":"Introduction to regtools","text":"cases, real microdata working large. Therefore, regtools encourages filter first approach. following functions useful keep relevant cases analysis.","code":""},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"filter-diagnostic-data","dir":"Articles","previous_headings":"Data filtering","what":"Filter diagnostic data","title":"Introduction to regtools","text":"filter diagnostic dataset, use filter_diag(). function validates ICD-10 codes indeed valid. valid, filters given diagnostic dataset keep observations relevant ICD-10 codes. example, keep observations either ICD-10 code F840 F841: Alternatively, also possible filter pattern/family codes. example, keep observations codes starting F45 F84: refine filter diagnostic dataset, curate_diag() provides additional options. example, can keep individuals (identified unique person identifier) least minimum number diagnostic events keep first-time diagnosis (date variable available). Look specific function’s documentation info.","code":"filtered_diag_codes <-  filter_diag(data = diag_df,                                     codes = c(\"F840\", \"F841\"),                                     id_col = \"id\",                                     code_col = \"code\",                                     log_path = log_file                                     ) #> Checking that code exists in ICD-10 code list... #> ✔ Selected ICD-10 codes are valid: F840, F841 #> Filtering data by selected ICD-10 codes... #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully filtered #>  #> ℹ Filtered 120031 rows (99.8% removed) #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering: #> ℹ Remaining number of rows: 225 #> ℹ Remaining number of columns: 3 #> ℹ Unique IDs in dataset: 225 #> ℹ ICD-10 codes in dataset: F840 and F841 #>  #> tibble [225 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id       : chr [1:225] \"P000000704\" \"P000010070\" \"P000010584\" \"P000044255\" ... #>  $ code     : chr [1:225] \"F840\" \"F840\" \"F840\" \"F840\" ... #>  $ diag_year: int [1:225] 2017 2019 2016 2019 2015 2013 2015 2015 2015 2019 ... filtered_diag_pattern <-  filter_diag(data = diag_df,                                       pattern_codes = c(\"F45\", \"F84\"),                                       id_col = \"id\",                                       code_col = \"code\",                                       log_path = log_file                                       ) #> Checking that code exists in ICD-10 code list... #> ✔ Selected ICD-10 codes are valid: F45, F84 #> Filtering data by selected ICD-10 codes... #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully filtered #>  #> ℹ Filtered 117717 rows (97.9% removed) #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering: #> ℹ Remaining number of rows: 2539 #> ℹ Remaining number of columns: 3 #> ℹ Unique IDs in dataset: 2464 #> ℹ ICD-10 codes in dataset: F4520, F454, F840, F845, F4529, F456, F4541, F841, F4522, F844, F842, F849, F457, F846, F455, F452, F45, F847, …, F459, and F843 #>  #> tibble [2,539 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id       : chr [1:2539] \"P000000704\" \"P000000704\" \"P000000886\" \"P000001615\" ... #>  $ code     : chr [1:2539] \"F4522\" \"F840\" \"F450\" \"F845\" ... #>  $ diag_year: int [1:2539] 2016 2017 2017 2020 2019 2016 2019 2020 2013 2019 ..."},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"filter-time-varying-and-time-invariant-data","dir":"Articles","previous_headings":"Data filtering","what":"Filter time-varying and time-invariant data","title":"Introduction to regtools","text":"filter time-varying time-invariant datasets, use filter_demo(). function filters given dataset keep observations relevant chracteristics. example, keep observations individuals resided municiplality “1146” years 2012-2015: case time-invariant data, keep individuals year birth 2006-2008 reason immigration “FAMM” “UTD”:","code":"filtered_var <- filter_demo(data = var_df,                             data_type = \"t_variant\",                             filter_param = list(\"year_varying\" = c(2012:2015), \"varying_code\" = c(\"1146\")),                             log_path = log_file) #> Filtering time-variant dataset... #> ✔ Filtered time-variant by 'year_varying and varying_code' column(s) #> ℹ Filtered 270216 rows (100% removed) #> ! The dataset has no NAs or they are coded in a different format. #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully filtered #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering: #> ℹ Remaining number of rows: 0 #> ℹ Remaining number of columns: 3 #>  #> tibble [0 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id          : chr(0)  #>  $ year_varying: int(0)  #>  $ varying_code: chr(0) filtered_invar <- filter_demo(data = invar_df, data_type = \"t_invariant\",                               filter_param = list(\"y_birth\" = c(2010:2018), \"innvandringsgrunn\" = c(\"ARB\",\"NRD\", \"UKJ\")),                               rm_na = FALSE,                               log_path = log_file) #> Filtering time-invariant dataset... #> ✔ Filtered time-invariant dataset by 'y_birth and innvandringsgrunn' column(s) #> ℹ Filtered 29333 rows (97.7% removed) #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully filtered #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering: #> ℹ Remaining number of rows: 691 #> ℹ Remaining number of columns: 4 #>  #> tibble [691 × 4] (S3: tbl_df/tbl/data.frame) #>  $ id               : chr [1:691] \"P000000704\" \"P000000886\" \"P000001615\" \"P000004197\" ... #>  $ sex              : Factor w/ 2 levels \"0\",\"1\": 2 1 1 2 1 2 2 2 2 2 ... #>  $ y_birth          : int [1:691] 2016 2016 2011 2010 2014 2015 2012 2010 2016 2011 ... #>  $ innvandringsgrunn: chr [1:691] \"UKJ\" \"ARB\" \"ARB\" \"NRD\" ..."},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"linkage","dir":"Articles","previous_headings":"","what":"Linkage","title":"Introduction to regtools","text":"filtering datasets, can link using individuals unique personal identifier. Depending type analysis relevant variables, might necessary link datasets. resulting dataset link_diag_demo()minimal tidy dataset can use run analytical functions.","code":"linked_diag_inv <- link_diag_demo(data_diag = filtered_diag_pattern,                                   data_demo_inv = filtered_invar,                                   id_col = \"id\",                                   log_path = log_file) #> Joining diagnostic data with time-invariant demographic data... #> ✔ Datasets succesfully linked: filtered_diag_pattern, filtered_invar #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ After joining added 3 columns to 'filtered_diag_pattern': sex, y_birth, and innvandringsgrunn #> ℹ Rows in 'filtered_diag_pattern': 2539 #> ℹ Rows in 'filtered_invar': 691 #> ✔ Total matched rows: 725"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"simulate-dataset","dir":"Articles","previous_headings":"Other useful functions","what":"Simulate dataset","title":"Introduction to regtools","text":"Simulates dataset. cases uses API, able run inside TSD","code":""},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"harmonize-municipality-codes","dir":"Articles","previous_headings":"Other useful functions","what":"Harmonize municipality codes","title":"Introduction to regtools","text":"Harmonizes codes. challenges working registries.","code":""},{"path":"https://amslala.github.io/regtools/articles/Introduction to regtools.html","id":"get-population-ssb","dir":"Articles","previous_headings":"Other useful functions","what":"Get population SSB","title":"Introduction to regtools","text":"API SSB: able run inside TSD","code":""},{"path":"https://amslala.github.io/regtools/articles/other-useful-fun.html","id":"harmonize-municipality-codes","dir":"Articles","previous_headings":"","what":"Harmonize municipality codes","title":"Other useful functions","text":"general terms, Norway administratively divided two main levels: counties (fylker) municipalities (kommuner). past 10 years, Norway undergone municipal structural reform purpose building larger local governments. Starting 2016, several Norwegian municipalities merged cases changed counties. amount municipalities progressively reduced 428 357 municipalities period 2017-2020. Similarly, amount counties reduced 19 counties 2018 11 counties 2020, increased 15 counties 2024. constant changes administrative structure Norway exemplify common challenges working registry data. instance, merging municipalities counties hinders analyses geographical components, population composition different regions Norway significantly changed. problem specially evident longitudinal analysis ability compare different time periods can affected changes classification systems. One way ensuring comparability different time points use harmonized classifications. changes structural reforms represent merging municipalities counties, possible know municipality code 2010 new merged municipalities 2024. However, case municipalities split years, possible know exactly equivalent . important time series, Statistics Norway currently publishes results using harmonized classifications. example, imagine individual-level data population interest including place residence year 2017 2024. However, want determine whether prevalence certain disease significantly changed 2024 2017 place residence. first step ensure codes classifications data stayed consistent comparable 2017 2024. function harmonize_municipality_codes() aids researchers harmonize municipality codes (1994-2024): residence_df includes column varying_code municipality codes 2017. Using harmonize_municipality_codes() can easily get harmonized codes (standard 2024), harmonized name corresponding county 2024.","code":"# Silenced CLI output for this example simulated_list <- regtools::synthetic_data(   population_size = 100,   prefix_ids = \"P000\",   length_ids = 6,   family_codes = c(\"F45\", \"F84\"),   pattern = \"increase\",   prevalence = .023,   diag_years  = 2017,   sex_vector = c(0,1),   y_birth = c(2010:2018),   filler_codes = \"F\",   filler_y_birth = c(2000:2009),   invariant_codes = list(\"innvandringsgrunn\" = c(\"ARB\", \"NRD\", \"UKJ\")),   invariant_codes_filler = list(\"innvandringsgrunn\" = c(\"FAMM\", \"UTD\")),   varying_query = \"kommuner\",   date_classifications = \"2017-01-01\",    seed = 123 )  residence_df <- simulated_list$datasets$var_df head(residence_df) #> # A tibble: 6 × 3 #>   id         year_varying varying_code #>   <chr>             <dbl> <chr>        #> 1 P000025558         2017 1662         #> 2 P000037543         2017 0125         #> 3 P000043041         2017 1711         #> 4 P000053240         2017 1103         #> 5 P000090076         2017 1543         #> 6 P000117065         2017 0625 residence_df_harmonized <- regtools::harmonize_municipality_codes(   data = residence_df,   municipality_col = \"varying_code\",    fylke = TRUE) #> ! NAs in municipality code column in residence_df: 0 #> ──────────────────────────────────────────────────────────────────────────────── #> ✔ Succesfully matched old municipality codes with harmonized municipality codes #> ℹ Total matched rows: 100  head(residence_df_harmonized) #> # A tibble: 6 × 7 #>   id        year_varying varying_code harmonized_code harmonized_name fylke_code #>   <chr>            <dbl> <chr>        <chr>           <chr>           <chr>      #> 1 P0000255…         2017 1662         K.5001          Trondheim - Tr… 50         #> 2 P0000375…         2017 0125         K.3118          Indre Østfold   31         #> 3 P0000430…         2017 1711         K.5034          Meråker         50         #> 4 P0000532…         2017 1103         K.1103          Stavanger       11         #> 5 P0000900…         2017 1543         K.1506          Molde           15         #> 6 P0001170…         2017 0625         K.3301          Drammen         33         #> # ℹ 1 more variable: fylke_name <chr>"},{"path":"https://amslala.github.io/regtools/articles/other-useful-fun.html","id":"get-population-ssb","dir":"Articles","previous_headings":"","what":"Get population SSB","title":"Other useful functions","text":"get_population_ssb() useful wrapper function ApiData() package PxWebApiData. main goal function facilitate retrieving population information Statistics Norway, performing handy operations like aggregating ages sex. mentioned , function requires internet connection likely work inside secure environment (like TSD). want get population 2020 2021 every county Norway using harmonized codes previously mentioned individuals aged 10-15:","code":"population_fylke<- get_population_ssb(   regions = \"fylker\",    years = c(2020, 2021),    ages = c(10:15),   aggregate_age = TRUE,   by_sex = TRUE,   save_xslx = FALSE) #> ℹ Retrieving population of fylker for the years: 2020,2021, and ages: 10,11,12,13,14,15 #> ℹ Aggregating ages... #> ✔ Population dataset ready!  head(population_fylke, 10) #> # A tibble: 10 × 7 #>    region_code sex   age   year  population region_name sex_value #>    <chr>       <chr> <chr> <chr>      <int> <chr>       <chr>     #>  1 03          1     010   2020        3742 Oslo        Males     #>  2 03          1     011   2020        3678 Oslo        Males     #>  3 03          1     012   2020        3645 Oslo        Males     #>  4 03          1     013   2020        3365 Oslo        Males     #>  5 03          1     014   2020        3291 Oslo        Males     #>  6 03          1     015   2020        3249 Oslo        Males     #>  7 03          1     Total 2020       20970 Oslo        Males     #>  8 03          1     010   2021        3687 Oslo        Males     #>  9 03          1     011   2021        3702 Oslo        Males     #> 10 03          1     012   2021        3658 Oslo        Males"},{"path":"https://amslala.github.io/regtools/articles/regtools.html","id":"package-datasets","dir":"Articles","previous_headings":"","what":"Package datasets","title":"Introduction to regtools","text":"exemplify main functions package, included couple illustrative simulated datasets. datasets also used examples specified functions’ documentation. Note: included datasets large size parallel size normally encounter working real microdata. dataset diag_df tibble simulated individual-level diagnostic data. documented ?diag_df dataset var_df tibble simulated individual-level time-varying data. documented ?var_df dataset invar_df tibble simulated individual-level time-invariant data. documented ?invar_df datasets created using simulate_dataset() function included package. exact code used create can found folder /data-raw package’s source code. Besides main diagnostic sociodemographic datasets included package, also two datasets included facilitate running examples: kommuner_2016: data.frame including municipality codes Norway valid 2016. linked_df: tibble including linked diagnostic, time-invariant time-varying data.","code":"str(diag_df) #> tibble [120,256 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id       : chr [1:120256] \"P000000704\" \"P000000704\" \"P000000704\" \"P000000704\" ... #>  $ code     : chr [1:120256] \"F4522\" \"F305\" \"F65\" \"F840\" ... #>  $ diag_year: int [1:120256] 2016 2020 2014 2017 2014 2017 2018 2020 2016 2013 ... str(var_df) #> tibble [270,216 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id          : chr [1:270216] \"P000000037\" \"P000000037\" \"P000000037\" \"P000000037\" ... #>  $ year_varying: int [1:270216] 2012 2013 2014 2015 2016 2017 2018 2019 2020 2012 ... #>  $ varying_code: chr [1:270216] \"0815\" \"0815\" \"0815\" \"0815\" ... str(invar_df) #> tibble [30,024 × 4] (S3: tbl_df/tbl/data.frame) #>  $ id               : chr [1:30024] \"P000000037\" \"P000000052\" \"P000000059\" \"P000000111\" ... #>  $ sex              : Factor w/ 2 levels \"0\",\"1\": 1 1 1 2 2 1 2 1 1 1 ... #>  $ y_birth          : int [1:30024] 2008 2000 2007 2003 2000 2003 2009 2005 2004 2002 ... #>  $ innvandringsgrunn: chr [1:30024] \"FAMM\" \"FAMM\" \"FAMM\" \"FAMM\" ..."},{"path":"https://amslala.github.io/regtools/articles/regtools.html","id":"general-features","dir":"Articles","previous_headings":"","what":"General features","title":"Introduction to regtools","text":"majority functions create log files encourage reproducibility consistency across research projects. Additionally, function provides clear console feedback executes important operations (filter, select, join, etc) next examples, can initialize temporary log file:","code":"log_file <- tempfile() cat(\"Vignette log file\", file = log_file)"},{"path":"https://amslala.github.io/regtools/articles/regtools.html","id":"data-reading-and-validation","dir":"Articles","previous_headings":"","what":"Data reading and validation","title":"Introduction to regtools","text":"Generally, researchers working individual level registry data (Norway) find datasets divided (delivered) three different categories: Diagnostic data: normally containing unique personal identifier (id), date diagnostic event, diagnosis code (ICD-10 ICP-2). instance, datasets NPR (Norwegian Patient Registry) KUHR. Time-invariandata: sociodemographic data date birth, immigration background, etc. Time-varying data: sociodemographic data place residence marital status. type information usually updated quarterly yearly administrative registries. Assuming researcher want compute sex-stratified prevalence rates certain diagnosis, least need diagnostic dataset time-invariant dataset (including sex). functions read_demo_data() read_diag_data() check dataset’s minimum requirements, well giving quick summary dataset’s structure. need specify column names corresponding id date variables (see function documentation info). Note: read functions check minimum requirements, real datasets can contain additional variables/columns. example, NPR sometimes includes sex age information individual diagnostic dataset.","code":"diag_csv <- system.file(\"extdata\", \"diag_data.csv\", package = \"regtools\")  diag_data_validated <- regtools::read_diag_data(diag_csv,                                                  id_col = \"id\",                                                  date_col = \"diag_year\",                                                  log_path = log_file) #> Reading C:/Users/ALMS/AppData/Local/Temp/RtmpQPLB28/temp_libpath4db41d1260d2/regtools/extdata/diag_data.csv file... #> ✔ Succesfully read file: C:/Users/ALMS/AppData/Local/Temp/RtmpQPLB28/temp_libpath4db41d1260d2/regtools/extdata/diag_data.csv #> Checking column requirements: #> ✔ ID column #> ✔ Code column #> ✔ Date column #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully read and columns validated #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ Number of rows: 120256. Number of columns: 3. #>  #>  #> 'data.frame':    120256 obs. of  3 variables: #>  $ id       : chr  \"P000000704\" \"P000000704\" \"P000000704\" \"P000000704\" ... #>  $ code     : chr  \"F4522\" \"F305\" \"F65\" \"F840\" ... #>  $ diag_year: int  2016 2020 2014 2017 2014 2017 2018 2020 2016 2013 ... demo_csv <- system.file(\"extdata\", \"invar_data.csv\", package = \"regtools\")  demo_data_validated <- read_demo_data(demo_csv,                                        data_type = \"t_invariant\",                                       id_col = \"id\",                                        log_path = log_file) #> Reading C:/Users/ALMS/AppData/Local/Temp/RtmpQPLB28/temp_libpath4db41d1260d2/regtools/extdata/invar_data.csv file... #> ✔ Succesfully read file: C:/Users/ALMS/AppData/Local/Temp/RtmpQPLB28/temp_libpath4db41d1260d2/regtools/extdata/invar_data.csv #> Checking column requirements: #> ✔ ID column #> ✔ Date column #> Data type: time invariant. Checking requirements... #> ✔ No duplicate IDs #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully read and columns validated #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ Number of rows: 30024. Number of columns: 4. #> ℹ Unique IDs in dataset: 30024. #>  #> 'data.frame':    30024 obs. of  4 variables: #>  $ id               : chr  \"P000000037\" \"P000000052\" \"P000000059\" \"P000000111\" ... #>  $ sex              : int  0 0 0 1 1 0 1 0 0 0 ... #>  $ y_birth          : int  2008 2000 2007 2003 2000 2003 2009 2005 2004 2002 ... #>  $ innvandringsgrunn: chr  \"FAMM\" \"FAMM\" \"FAMM\" \"FAMM\" ..."},{"path":"https://amslala.github.io/regtools/articles/regtools.html","id":"data-filtering","dir":"Articles","previous_headings":"","what":"Data filtering","title":"Introduction to regtools","text":"cases, real microdata working large. Therefore, regtools encourages filter first approach. following functions useful keep relevant cases analysis.","code":""},{"path":"https://amslala.github.io/regtools/articles/regtools.html","id":"filter-diagnostic-data","dir":"Articles","previous_headings":"Data filtering","what":"Filter diagnostic data","title":"Introduction to regtools","text":"filter diagnostic dataset, use filter_diag(). function validates ICD-10 codes indeed valid. valid, filters given diagnostic dataset keep observations relevant ICD-10 codes. example, keep observations either ICD-10 code F840 F841: Alternatively, also possible filter pattern/family codes. example, keep observations codes starting F45 F84: refine filter diagnostic dataset, curate_diag() provides additional options. example, can keep individuals (identified unique person identifier) least minimum number diagnostic events keep first-time diagnosis (date variable available). Look specific function’s documentation info.","code":"filtered_diag_codes <-  filter_diag(data = diag_df,                                     codes = c(\"F840\", \"F841\"),                                     id_col = \"id\",                                     code_col = \"code\",                                     log_path = log_file                                     ) #> Checking that code exists in ICD-10 code list... #> ✔ Selected ICD-10 codes are valid: F840, F841 #> Filtering data by selected ICD-10 codes... #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully filtered #>  #> ℹ Filtered 120031 rows (99.8% removed) #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering: #> ℹ Remaining number of rows: 225 #> ℹ Remaining number of columns: 3 #> ℹ Unique IDs in dataset: 225 #> ℹ ICD-10 codes in dataset: F840 and F841 #>  #> tibble [225 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id       : chr [1:225] \"P000000704\" \"P000010070\" \"P000010584\" \"P000044255\" ... #>  $ code     : chr [1:225] \"F840\" \"F840\" \"F840\" \"F840\" ... #>  $ diag_year: int [1:225] 2017 2019 2016 2019 2015 2013 2015 2015 2015 2019 ... filtered_diag_pattern <-  filter_diag(data = diag_df,                                       pattern_codes = c(\"F45\", \"F84\"),                                       id_col = \"id\",                                       code_col = \"code\",                                       log_path = log_file                                       ) #> Checking that code exists in ICD-10 code list... #> ✔ Selected ICD-10 codes are valid: F45, F84 #> Filtering data by selected ICD-10 codes... #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully filtered #>  #> ℹ Filtered 117717 rows (97.9% removed) #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering: #> ℹ Remaining number of rows: 2539 #> ℹ Remaining number of columns: 3 #> ℹ Unique IDs in dataset: 2464 #> ℹ ICD-10 codes in dataset: F4520, F454, F840, F845, F4529, F456, F4541, F841, F4522, F844, F842, F849, F457, F846, F455, F452, F45, F847, …, F459, and F843 #>  #> tibble [2,539 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id       : chr [1:2539] \"P000000704\" \"P000000704\" \"P000000886\" \"P000001615\" ... #>  $ code     : chr [1:2539] \"F4522\" \"F840\" \"F450\" \"F845\" ... #>  $ diag_year: int [1:2539] 2016 2017 2017 2020 2019 2016 2019 2020 2013 2019 ..."},{"path":"https://amslala.github.io/regtools/articles/regtools.html","id":"filter-time-varying-and-time-invariant-data","dir":"Articles","previous_headings":"Data filtering","what":"Filter time-varying and time-invariant data","title":"Introduction to regtools","text":"filter time-varying time-invariant datasets, use filter_demo(). function filters given dataset keep observations relevant chracteristics. example, keep observations individuals resided municiplality “1146” years 2012-2015: case time-invariant data, keep individuals year birth 2006-2008 reason immigration “FAMM” “UTD”:","code":"filtered_var <- filter_demo(data = var_df,                             data_type = \"t_variant\",                             filter_param = list(\"year_varying\" = c(2012:2015), \"varying_code\" = c(\"1146\")),                             log_path = log_file) #> Filtering time-variant dataset... #> ✔ Filtered time-variant by 'year_varying and varying_code' column(s) #> ℹ Filtered 270216 rows (100% removed) #> ! The dataset has no NAs or they are coded in a different format. #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully filtered #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering: #> ℹ Remaining number of rows: 0 #> ℹ Remaining number of columns: 3 #>  #> tibble [0 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id          : chr(0)  #>  $ year_varying: int(0)  #>  $ varying_code: chr(0) filtered_invar <- filter_demo(data = invar_df, data_type = \"t_invariant\",                               filter_param = list(\"y_birth\" = c(2010:2018), \"innvandringsgrunn\" = c(\"ARB\",\"NRD\", \"UKJ\")),                               rm_na = FALSE,                               log_path = log_file) #> Filtering time-invariant dataset... #> ✔ Filtered time-invariant dataset by 'y_birth and innvandringsgrunn' column(s) #> ℹ Filtered 29333 rows (97.7% removed) #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully filtered #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering: #> ℹ Remaining number of rows: 691 #> ℹ Remaining number of columns: 4 #>  #> tibble [691 × 4] (S3: tbl_df/tbl/data.frame) #>  $ id               : chr [1:691] \"P000000704\" \"P000000886\" \"P000001615\" \"P000004197\" ... #>  $ sex              : Factor w/ 2 levels \"0\",\"1\": 2 1 1 2 1 2 2 2 2 2 ... #>  $ y_birth          : int [1:691] 2016 2016 2011 2010 2014 2015 2012 2010 2016 2011 ... #>  $ innvandringsgrunn: chr [1:691] \"UKJ\" \"ARB\" \"ARB\" \"NRD\" ..."},{"path":"https://amslala.github.io/regtools/articles/regtools.html","id":"linkage","dir":"Articles","previous_headings":"","what":"Linkage","title":"Introduction to regtools","text":"filtering datasets, can link using individuals unique personal identifier. Depending type analysis relevant variables, might necessary link datasets. resulting dataset link_diag_demo()minimal tidy dataset can use run analytical functions.","code":"linked_diag_inv <- link_diag_demo(data_diag = filtered_diag_pattern,                                   data_demo_inv = filtered_invar,                                   id_col = \"id\",                                   log_path = log_file) #> Joining diagnostic data with time-invariant demographic data... #> ✔ Datasets succesfully linked: filtered_diag_pattern, filtered_invar #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ After joining added 3 columns to 'filtered_diag_pattern': sex, y_birth, and innvandringsgrunn #> ℹ Rows in 'filtered_diag_pattern': 2539 #> ℹ Rows in 'filtered_invar': 691 #> ✔ Total matched rows: 725"},{"path":[]},{"path":"https://amslala.github.io/regtools/articles/regtools.html","id":"visualize","dir":"Articles","previous_headings":"","what":"Visualize","title":"Introduction to regtools","text":"t important note get_population_ssb() function requires internet connection therefore works outside TSD (Services sensitive data).","code":""},{"path":"https://amslala.github.io/regtools/articles/regtools_v1.html","id":"package-datasets","dir":"Articles","previous_headings":"","what":"Package datasets","title":"Introduction to regtools","text":"exemplify main functions package, included couple illustrative simulated datasets. datasets also used examples specified functions’ documentation. Note: included datasets large size parallel size normally encounter working real microdata. dataset diag_df tibble simulated individual-level diagnostic data. documented ?diag_df dataset var_df tibble simulated individual-level time-varying data. documented ?var_df dataset invar_df tibble simulated individual-level time-invariant data. documented ?invar_df datasets created using simulate_dataset() function included package. exact code used create can found folder /data-raw package’s source code. Besides main diagnostic sociodemographic datasets included package, also two datasets included facilitate running examples: kommuner_2016: data.frame including municipality codes Norway valid 2016 linked_df: tibble including linked diagnostic, time-invariant time-varying data.","code":"str(diag_df) str(var_df) str(invar_df)"},{"path":"https://amslala.github.io/regtools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Alejandra Martinez Sanchez. Maintainer.","code":""},{"path":"https://amslala.github.io/regtools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sanchez (2025). regtools: regtools: Trend/prevalence analysis visualization tool mental health diagnoses Norwegian health registers. R package version 0.1.0, https://amslala.github.io/regtools/, https://github.com/amslala/regtools.","code":"@Manual{,   title = {regtools: regtools: Trend/prevalence analysis and visualization tool for mental health diagnoses in Norwegian health registers},   author = {Alejandra Martinez Sanchez},   year = {2025},   note = {R package version 0.1.0, https://amslala.github.io/regtools/},   url = {https://github.com/amslala/regtools}, }"},{"path":"https://amslala.github.io/regtools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 regtools authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_incidence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate incidence rates — calculate_incidence","title":"Calculate incidence rates — calculate_incidence","text":"calculate_incidence() function calculates incidence rates based given diagnostic demographic information. Incidence represents number new cases given diagnosis exist population interest specified point period time.","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_incidence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate incidence rates — calculate_incidence","text":"","code":"calculate_incidence(   linked_data,   type = c(\"cumulative\", \"rate\"),   id_col = \"id\",   date_col = \"date\",   pop_data = NULL,   pop_col = \"pop_count\",   person_time_data = NULL,   person_time_col = NULL,   time_p = NULL,   grouping_vars = NULL,   only_counts = FALSE,   suppression = TRUE,   suppression_threshold = 5,   CI = TRUE,   CI_level = 0.99,   log_path = NULL )"},{"path":"https://amslala.github.io/regtools/reference/calculate_incidence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate incidence rates — calculate_incidence","text":"linked_data data frame containing linked relevant diagnostic demographic information. include first time diagnosis, see 'curate_diag' type Character string. Valid options \"cumulative\" \"rate\". \"cumulative\", \"rate\", id_col character string. Name ID (unique personal identifier) column linked_data. Default \"id\". date_col character string. Name  date column linked_data. Default \"date\". pop_data data frame containing corresponding population risk information. pop_col character string. Name column containing population counts pop_data. person_time_data data frame containing corresponding person-time information. person_time_col character string. Name column containing person-time counts person_time_data. time_p numeric value numeric vector. Time point time period used calculate incidence. time period, specify range. first value vector period's lower bound, second element period's upper bound. Example:  time_p = c(2010,2015) time point, single numeric value. Example: time_p = 2010 grouping_vars Character vector (optional). Grouping variables aggregation diagnostic counts (e.g. sex, education). only_counts Logical. want diagnostic counts? Default FALSE. TRUE, return counts. suppression Logical. Suppress results (counts rates) order maintain statistical confidentiality? Default TRUE. TRUE, applies primary suppression (NA) value threshold defined suppression_threshold suppression_threshold Integer. Threshold used suppression, default set 5 (NPR standard). CI Logical. Want compute binomial confidence intervals? Default TRUE. TRUE, add two new columns upper lower CI bound significance level defined CI_level. Uses Pearson-Klopper method. CI_level numerical value 0 1. Level confidence intervals, default set 0.99 log_path character string. Path log file append function logs. Default NULL. NULL, new directory /log file created current working directory.","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_incidence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate incidence rates — calculate_incidence","text":"Incidence table","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_incidence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate incidence rates — calculate_incidence","text":"","code":"log_file <- tempfile() cat(\"Example log file\", file = log_file)  pop_df <- tibble::tibble(year = \"2012-2013\", population = 4500) linked_df <- linked_df |> dplyr::rename(\"year\"= \"diag_year\") #> Error in dplyr::rename(linked_df, year = \"diag_year\"): Can't rename columns that don't exist. #> ✖ Column `diag_year` doesn't exist.  incidence_df <- calculate_incidence(linked_df,   type = \"cumulative\",   id_col = \"id\",   date_col = \"year\",   pop_data = pop_df,   pop_col = \"population\",   time_p = c(2012,2013),   only_counts = FALSE,   suppression = TRUE,   suppression_threshold = 10,   log_path = log_file) #> Error in calculate_incidence(linked_df, type = \"cumulative\", id_col = \"id\",     date_col = \"year\", pop_data = pop_df, pop_col = \"population\",     time_p = c(2012, 2013), only_counts = FALSE, suppression = TRUE,     suppression_threshold = 10, log_path = log_file): The linked dataset must contain the specified 'date' column: year"},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prevalence rates — calculate_prevalence","title":"Calculate prevalence rates — calculate_prevalence","text":"calculate_prevalence() function calculates prevalence rates based given diagnostic demographic information. Prevalence represents number cases given diagnosis exist population interest specified point period time.","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prevalence rates — calculate_prevalence","text":"","code":"calculate_prevalence(   linked_data,   id_col = \"id\",   date_col = \"date\",   pop_data = NULL,   pop_col = \"pop_count\",   time_p,   grouping_vars = NULL,   CI = TRUE,   CI_level = 0.99,   only_counts = FALSE,   suppression = TRUE,   suppression_threshold = 5,   log_path = NULL )"},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate prevalence rates — calculate_prevalence","text":"linked_data data frame containing linked relevant diagnostic demographic information. id_col character string. Name ID (unique personal identifier) column linked_data. Default \"id\". date_col character string. Name  date column linked_data. Default \"date\". pop_data data frame containing corresponding population count information. pop_col character string. Name column containing population counts pop_data. time_p numeric value numeric vector. Time point time period used calculate incidence. period prevalence, specify range. first value vector period's lower bound, second element period's upper bound. Example:  time_p = c(2010,2015) point prevalence, single numeric value. Example: time_p = 2010 grouping_vars Character vector (optional). Grouping variables aggregation diagnostic counts (e.g. sex, education). CI Logical. Want compute binomial confidence intervals? Default TRUE. TRUE, add two new columns upper lower CI bound significance level defined CI_level. Uses Pearson-Klopper method. CI_level numerical value 0 1. Level confidence intervals, default set 0.99 only_counts Logical. want diagnostic counts? Default FALSE. TRUE, return counts. suppression Logical. Suppress results (counts rates) order maintain statistical confidentiality? Default TRUE. TRUE, applies primary suppression (NA) value threshold defined suppression_threshold suppression_threshold Integer. Threshold used suppression, default set 5 (NPR standard). log_path character string. Path log file append function logs. Default NULL. NULL, new directory /log file created current working directory.","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate prevalence rates — calculate_prevalence","text":"Prevalence rate table","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate prevalence rates — calculate_prevalence","text":"","code":"log_file <- tempfile() cat(\"Example log file\", file = log_file)  pop_df <- tibble::tibble(year = \"2012-2020\", population = 30024) linked_df <- linked_df |> dplyr::rename(\"year\"= \"diag_year\") #> Error in dplyr::rename(linked_df, year = \"diag_year\"): Can't rename columns that don't exist. #> ✖ Column `diag_year` doesn't exist.  prevalence_df <- calculate_prevalence(linked_df,   id_col = \"id\",   date_col = \"year\",   pop_data = pop_df,   pop_col = \"population\",   time_p = c(2012,2020),   CI = TRUE,   CI_level = 0.95,   only_counts = FALSE,   suppression = TRUE,   suppression_threshold = 10,   log_path = log_file) #> Computing prevalence rates/counts... #> Error in dplyr::filter(linked_data, .data[[date_col]] >= time_p[1], .data[[date_col]] <=     time_p[2]): ℹ In argument: `.data[[\"year\"]] >= time_p[1]`. #> Caused by error in `.data[[\"year\"]]`: #> ! Column `year` not found in `.data`."},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence_series.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate prevalence series rates — calculate_prevalence_series","title":"Calculate prevalence series rates — calculate_prevalence_series","text":"calculate_prevalence_series() function calculates prevalence rates series based given diagnostic demographic information. Use calculate_prevalence() function one time period time point. Prevalence represents number cases given diagnosis exist population interest specified point period time.","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence_series.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate prevalence series rates — calculate_prevalence_series","text":"","code":"calculate_prevalence_series(   linked_data,   time_points,   id_col = \"id\",   date_col = \"date\",   pop_data,   pop_col = \"pop_count\",   grouping_vars = NULL,   only_counts = FALSE,   suppression = TRUE,   suppression_threshold = 5,   CI = TRUE,   CI_level = 0.99,   log_path = NULL )"},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence_series.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate prevalence series rates — calculate_prevalence_series","text":"linked_data data frame containing linked relevant diagnostic demographic information. time_points list containing either individual time points time period (range). time points, element list individual year. example, time_points = list(2012, 2013, 2014) time periods, element list two years representing range years desired period. example, time_points <- list(c(2012,2014), c(2014,2016), c(2016,2018)) id_col character string. Name ID (unique personal identifier) column linked_data. Default \"id\". date_col character string. Name  date column linked_data. Default \"date\". pop_data data frame containing corresponding population count information. pop_col character string. Name column containing population counts pop_data. grouping_vars Character vector (optional). Grouping variables aggregation diagnostic counts (e.g. sex, education). only_counts Logical. want diagnostic counts? Default FALSE. TRUE, return counts. suppression Logical. Suppress results (counts rates) order maintain statistical confidentiality? Default TRUE. TRUE, applies primary suppression (NA) value threshold defined suppression_threshold suppression_threshold Integer. Threshold used suppression, default set 5 (NPR standard). CI Logical. Want compute binomial confidence intervals? Default TRUE. TRUE, add two new columns upper lower CI bound significance level defined CI_level. Uses Pearson-Klopper method. CI_level numerical value 0 1. Level confidence intervals, default set 0.99 log_path character string. Path log file append function logs. Default NULL. NULL, new directory /log file created current working directory.","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence_series.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate prevalence series rates — calculate_prevalence_series","text":"Prevalence series specified time points/periods","code":""},{"path":"https://amslala.github.io/regtools/reference/calculate_prevalence_series.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate prevalence series rates — calculate_prevalence_series","text":"","code":"log_file <- tempfile() cat(\"Example log file\", file = log_file)  pop_df <- tibble::tibble(year = c(2012:2020), population = floor(runif(9, min=3000, max=4000))) linked_df <- linked_df |> dplyr::rename(\"year\"= \"diag_year\") #> Error in dplyr::rename(linked_df, year = \"diag_year\"): Can't rename columns that don't exist. #> ✖ Column `diag_year` doesn't exist.  prevalence_df <- calculate_prevalence_series(linked_df,   time_points = list(2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020),   id_col = \"id\",   date_col = \"year\",   pop_data = pop_df,   pop_col = \"population\",   only_counts = FALSE,   suppression = TRUE,   suppression_threshold = 1,   CI = TRUE,   CI_level = 0.95,   log_path = log_file) #> Computing prevalence rates/counts... #> Error in purrr::map(processed_time_points, function(time_p) {    regtools::calculate_prevalence(linked_data = linked_data,         id_col = id_col, date_col = date_col, pop_data = pop_data,         pop_col = pop_col, time_p = time_p, grouping_vars = grouping_vars,         only_counts = only_counts, suppression = suppression,         suppression_threshold = suppression_threshold, CI = CI,         CI_level = CI_level, log_path = log_path)}): ℹ In index: 1. #> Caused by error in `dplyr::filter()`: #> ℹ In argument: `.data[[\"year\"]] == time_p`. #> Caused by error in `.data[[\"year\"]]`: #> ! Column `year` not found in `.data`."},{"path":"https://amslala.github.io/regtools/reference/curate_diag.html","id":null,"dir":"Reference","previous_headings":"","what":"Curate diagnostic data — curate_diag","title":"Curate diagnostic data — curate_diag","text":"Curate diagnostic data","code":""},{"path":"https://amslala.github.io/regtools/reference/curate_diag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Curate diagnostic data — curate_diag","text":"","code":"curate_diag(   data,   min_diag = 1,   first_diag = TRUE,   id_col = \"id\",   code_col = \"icd_code\",   date_col = \"date\",   log_path = NULL )"},{"path":"https://amslala.github.io/regtools/reference/curate_diag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Curate diagnostic data — curate_diag","text":"data data frame containing pre-processed validated diagnostic data. min_diag Integer. Number minimum amount diagnostic events. Default 1. first_diag Logical. TRUE, keep information first recorded diagnostic event. Default set TRUE. Default TRUE. id_col character string. Name ID column data, default \"id\" code_col character string. Name column containing ICD-10 codes data, default \"icd_code\" date_col character string. Name column containing diagnostic date data, default \"date\" log_path character string. Path log file append function logs. Default NULL. NULL, new directory /log file created current working directory.","code":""},{"path":"https://amslala.github.io/regtools/reference/curate_diag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Curate diagnostic data — curate_diag","text":"Curated diagnostic data: minimum diagnostic events, /first ever diagnosis information","code":""},{"path":"https://amslala.github.io/regtools/reference/curate_diag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Curate diagnostic data — curate_diag","text":"","code":"# Keep only curated diagnostic data # for example minimum diagnostic events or first recorded diagnosis  log_file <- tempfile() cat(\"Example log file\", file = log_file)  curated_diag_df <- curate_diag(data = diag_df,                                min_diag = 1,                                first_diag = TRUE,                                id_col = \"id\",                                code_col = \"code\",                                date_col = \"diag_year\",                                log_path = log_file) #> ✔ Filtered observations that do not have at least 1 diagnostic event #> ✔ Summarized first diagnostic event information #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully curated and summarized #>  #> ℹ Filtered 90232 rows (75% removed) #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering:  #> ℹ Remaining number of rows: 30024 #> ℹ Remaining number of columns: 4 #> ℹ Unique IDs in dataset: 30024 #> ℹ ICD-10 codes in dataset: F726, F639, F543, F872, F868, F150, F323, F115, F959, F182, F913, F1620, F060, F337, F1319, F701, F8181, F965, …, F923, and F075 #>  #> tibble [30,024 × 4] (S3: tbl_df/tbl/data.frame) #>  $ id               : chr [1:30024] \"P000000037\" \"P000000052\" \"P000000059\" \"P000000111\" ... #>  $ code             : chr [1:30024] \"F750\" \"F035\" \"F198\" \"F230\" ... #>  $ y_diagnosis_first: int [1:30024] 2018 2012 2013 2012 2013 2012 2013 2013 2013 2013 ... #>  $ diagnosis_count  : int [1:30024] 2 5 2 2 5 6 3 4 4 5 ..."},{"path":"https://amslala.github.io/regtools/reference/diag_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example diagnostic individual-level data — diag_df","title":"Example diagnostic individual-level data — diag_df","text":"simulated dataset including individual information unique ID, ICD-10 diagnosis date (year).","code":""},{"path":"https://amslala.github.io/regtools/reference/diag_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example diagnostic individual-level data — diag_df","text":"","code":"diag_df"},{"path":"https://amslala.github.io/regtools/reference/diag_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example diagnostic individual-level data — diag_df","text":"diag_df data frame 30,024 rows 3 columns: id Unique personal identifier code ICD-10 codes diag_year Year diagnosis","code":""},{"path":"https://amslala.github.io/regtools/reference/diag_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example diagnostic individual-level data — diag_df","text":"Code used simulate dataset can found /data-raw directory","code":""},{"path":"https://amslala.github.io/regtools/reference/filter_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter demographic data by selected filtering parameters — filter_demo","title":"Filter demographic data by selected filtering parameters — filter_demo","text":"Filter demographic data selected filtering parameters","code":""},{"path":"https://amslala.github.io/regtools/reference/filter_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter demographic data by selected filtering parameters — filter_demo","text":"","code":"filter_demo(   data,   data_type = c(\"t_variant\", \"t_invariant\"),   filter_param,   id_col = NULL,   any = FALSE,   rm_na = TRUE,   log_path = NULL )"},{"path":"https://amslala.github.io/regtools/reference/filter_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter demographic data by selected filtering parameters — filter_demo","text":"data data frame containing pre-processed demographic data. data_type character string. Type demographic data: \"t_variant\" \"t_invariant\" filter_param named list containing filtering parameters. names list column names values vectors values keep. id_col character string. Name ID column data set. Optional, necessary = TRUE Logical. Filtering option, year. Default FALSE rm_na Logical. rows NA non-filtered columns removed? Default FALSE TRUE, removes observations NA non-filtered columns. log_path character string. Path log file append function logs. Default NULL NULL, new directory /log file created current working directory.","code":""},{"path":"https://amslala.github.io/regtools/reference/filter_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter demographic data by selected filtering parameters — filter_demo","text":"Filtered demographic dataframe containing relevant observations based filtering parameters.","code":""},{"path":"https://amslala.github.io/regtools/reference/filter_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter demographic data by selected filtering parameters — filter_demo","text":"","code":"# Filter varying and unvarying datasets  log_file <- tempfile() cat(\"Example log file\", file = log_file)  filtered_var <- filter_demo(data = var_df, data_type = \"t_variant\", filter_param = list(\"year_varying\" = c(2012:2015), \"varying_code\" = c(\"1146\")), log_path = log_file) #> Filtering time-variant dataset... #> ✔ Filtered time-variant by 'year_varying and varying_code' column(s) #> ℹ Filtered 270216 rows (100% removed) #>  #> ! The dataset has no NAs or they are coded in a different format. #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully filtered #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering:  #> ℹ Remaining number of rows: 0 #> ℹ Remaining number of columns: 3 #>  #> tibble [0 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id          : chr(0)  #>  $ year_varying: int(0)  #>  $ varying_code: chr(0)    filtered_invar <- filter_demo(data = invar_df, data_type = \"t_invariant\", filter_param = list(\"y_birth\" = c(2006:2008), \"innvandringsgrunn\" = c(\"FAMM\", \"UTD\")), rm_na = FALSE, log_path = log_file) #> Filtering time-invariant dataset... #> ✔ Filtered time-invariant dataset by 'y_birth and innvandringsgrunn' column(s) #> ℹ Filtered 21140 rows (70.4% removed) #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully filtered #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering:  #> ℹ Remaining number of rows: 8884 #> ℹ Remaining number of columns: 4 #>  #> tibble [8,884 × 4] (S3: tbl_df/tbl/data.frame) #>  $ id               : chr [1:8884] \"P000000037\" \"P000000059\" \"P000000431\" \"P000000839\" ... #>  $ sex              : Factor w/ 2 levels \"0\",\"1\": 1 1 2 2 2 2 2 1 1 2 ... #>  $ y_birth          : int [1:8884] 2008 2007 2007 2006 2006 2008 2007 2006 2008 2007 ... #>  $ innvandringsgrunn: chr [1:8884] \"FAMM\" \"FAMM\" \"UTD\" \"UTD\" ..."},{"path":"https://amslala.github.io/regtools/reference/filter_diag.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate and filter diagnostic data by selected ICD-10 codes — filter_diag","title":"Validate and filter diagnostic data by selected ICD-10 codes — filter_diag","text":"Validate filter diagnostic data selected ICD-10 codes","code":""},{"path":"https://amslala.github.io/regtools/reference/filter_diag.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate and filter diagnostic data by selected ICD-10 codes — filter_diag","text":"","code":"filter_diag(   data,   codes = NULL,   pattern_codes = NULL,   classification = \"icd\",   id_col = \"id\",   code_col = \"icd_code\",   date_col = NULL,   diag_dates = NULL,   log_path = NULL )"},{"path":"https://amslala.github.io/regtools/reference/filter_diag.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate and filter diagnostic data by selected ICD-10 codes — filter_diag","text":"data data frame containing pre-processed diagnostic data. codes character vector. ICD-10 codes validate filter data pattern_codes character vector. Pattern ICD-10 codes validate filter data. example, F84 use codes starting F84 (F840, F841, F842, F844, etc. classification character string. Classification used diagnostic codes: ICD-10  ICPC-2. Options \"icd\" \"icpc\". Default \"icd\". id_col character string. Name ID column data, default \"id\" code_col character string. Name column containing ICD-10 codes data, default \"icd_code\" date_col character string. Name column containing date diagnostic event. needed want filter diagnosis date. Default NULL. diag_dates character vector. Dates (years, months, etc) want filter diagnostic data . log_path character string. Path log file append function logs. Default NULL. NULL, new directory /log file created current working directory.","code":""},{"path":"https://amslala.github.io/regtools/reference/filter_diag.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Validate and filter diagnostic data by selected ICD-10 codes — filter_diag","text":"Filtered validated diagnostic data frame containing relevant observations based diagnostic codes interest.","code":""},{"path":"https://amslala.github.io/regtools/reference/filter_diag.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Validate and filter diagnostic data by selected ICD-10 codes — filter_diag","text":"","code":"# Validate that F45 and F84 are real codes/family of codes in ICD-10. # Keep only rows with codes containing F45 and F84.  log_file <- tempfile() cat(\"Example log file\", file = log_file)  filtered_diag_df <-  filter_diag(data = diag_df,                                  pattern_codes = c(\"F45\", \"F84\"),                                  id_col = \"id\",                                  code_col = \"code\",                                  log_path = log_file                                  ) #> Checking that code exists in ICD-10 code list... #> ✔ Selected ICD-10 codes are valid: F45, F84 #>  #> Filtering data by selected ICD-10 codes... #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully filtered #>  #> ℹ Filtered 117717 rows (97.9% removed) #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ── After filtering:  #> ℹ Remaining number of rows: 2539 #> ℹ Remaining number of columns: 3 #> ℹ Unique IDs in dataset: 2464 #> ℹ ICD-10 codes in dataset: F4520, F454, F840, F845, F4529, F456, F4541, F841, F4522, F844, F842, F849, F457, F846, F455, F452, F45, F847, …, F459, and F843 #>  #> tibble [2,539 × 3] (S3: tbl_df/tbl/data.frame) #>  $ id       : chr [1:2539] \"P000000704\" \"P000000704\" \"P000000886\" \"P000001615\" ... #>  $ code     : chr [1:2539] \"F4522\" \"F840\" \"F450\" \"F845\" ... #>  $ diag_year: int [1:2539] 2016 2017 2017 2020 2019 2016 2019 2020 2013 2019 ..."},{"path":"https://amslala.github.io/regtools/reference/get_population_ssb.html","id":null,"dir":"Reference","previous_headings":"","what":"Get yearly population data from SSB, by region, sex and age. — get_population_ssb","title":"Get yearly population data from SSB, by region, sex and age. — get_population_ssb","text":"Get yearly population data SSB, region, sex age.","code":""},{"path":"https://amslala.github.io/regtools/reference/get_population_ssb.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get yearly population data from SSB, by region, sex and age. — get_population_ssb","text":"","code":"get_population_ssb(   url_api = \"https://data.ssb.no/api/v0/en/table/07459/\",   regions = c(\"norway\", \"fylker\", \"kommuner\"),   years,   ages,   aggregate_age = TRUE,   by_sex = TRUE,   save_xslx = FALSE )"},{"path":"https://amslala.github.io/regtools/reference/get_population_ssb.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get yearly population data from SSB, by region, sex and age. — get_population_ssb","text":"url_api Character string. URL used SSB API call. modify. regions Character string. Supported regions: \"norway\" country-wise population counts \"fylker\" county population counts \"kommuner\" municipality population counts (excluding Svalbard Jan Mayen). Due region reforms Norway, results shown using SSB's harmonized county codes (2024) years Numerical vector. Year(s) population counts. ages Numerical vector. Age(s) whole years. aggregate_age Logical. Default TRUE. TRUE one age given, include new row aggregated population age group. by_sex Logical. Default TRUE. TRUE population counts disaggregated sex (male, female) save_xslx Logical. Want save results xslx? Default FALSE. TRUE results saved xslx current working directory.","code":""},{"path":"https://amslala.github.io/regtools/reference/get_population_ssb.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get yearly population data from SSB, by region, sex and age. — get_population_ssb","text":"Data frame population data SSB","code":""},{"path":"https://amslala.github.io/regtools/reference/get_population_ssb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get yearly population data from SSB, by region, sex and age. — get_population_ssb","text":"","code":"# Population of Norway in 2020 to 2022, for ages 10 to 15, # include total of that age group (10-15) for each year. population_norway <- get_population_ssb(regions = \"norway\",                                         years = c(2020:2022),                                         ages = c(10:15),                                         aggregate_age = TRUE,                                         by_sex = TRUE,                                         save_xslx = FALSE) #> ℹ Retrieving population of norway for the years: 2020,2021,2022, and ages: 10,11,12,13,14,15 #> ℹ Aggregating ages... #> ✔ Population dataset ready!"},{"path":"https://amslala.github.io/regtools/reference/harmonize_municipality_codes.html","id":null,"dir":"Reference","previous_headings":"","what":"Harmonize old municipality codes in Norway to 2024 municipality codes — harmonize_municipality_codes","title":"Harmonize old municipality codes in Norway to 2024 municipality codes — harmonize_municipality_codes","text":"Harmonize old municipality codes Norway 2024 municipality codes","code":""},{"path":"https://amslala.github.io/regtools/reference/harmonize_municipality_codes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Harmonize old municipality codes in Norway to 2024 municipality codes — harmonize_municipality_codes","text":"","code":"harmonize_municipality_codes(data, municipality_col = \"code\", fylke = FALSE)"},{"path":"https://amslala.github.io/regtools/reference/harmonize_municipality_codes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Harmonize old municipality codes in Norway to 2024 municipality codes — harmonize_municipality_codes","text":"data Data frame, data frame extensions (e.g. tibble). municipality_col Character vector. Name column containing original municipality codes. fylke Logical. TRUE, output data frame also includs column name corresponding fylke 2024. Default FALSE.","code":""},{"path":"https://amslala.github.io/regtools/reference/harmonize_municipality_codes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Harmonize old municipality codes in Norway to 2024 municipality codes — harmonize_municipality_codes","text":"Data frame old equivalent municipal codes 2024.","code":""},{"path":"https://amslala.github.io/regtools/reference/harmonize_municipality_codes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Harmonize old municipality codes in Norway to 2024 municipality codes — harmonize_municipality_codes","text":"","code":"# Harmonize municipality codes from 2016 to 2024  harmonized_codes <- harmonize_municipality_codes(data = kommuner_2016, municipality_col = \"code\") #> ! NAs in municipality code column in kommuner_2016: 0 #> ──────────────────────────────────────────────────────────────────────────────── #> ✔ Succesfully matched old municipality codes with harmonized municipality codes #> ℹ Total matched rows: 429"},{"path":"https://amslala.github.io/regtools/reference/invar_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example time-invariant individual-level data — invar_df","title":"Example time-invariant individual-level data — invar_df","text":"simulated dataset including time-invariant individual information year birth reason immigration","code":""},{"path":"https://amslala.github.io/regtools/reference/invar_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example time-invariant individual-level data — invar_df","text":"","code":"invar_df"},{"path":"https://amslala.github.io/regtools/reference/invar_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example time-invariant individual-level data — invar_df","text":"invar_df data frame 30,024 rows 4 columns: id Unique personal identifier sex Sex (code) y_birth Year birth innvandringsgrunn Reason immigration (https://www.ssb./klass/klassifikasjoner/355)","code":""},{"path":"https://amslala.github.io/regtools/reference/invar_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example time-invariant individual-level data — invar_df","text":"Code used simulate dataset can found /data-raw directory","code":""},{"path":"https://amslala.github.io/regtools/reference/kommuner_2016.html","id":null,"dir":"Reference","previous_headings":"","what":"Norwegian municipalities valid in 2016 — kommuner_2016","title":"Norwegian municipalities valid in 2016 — kommuner_2016","text":"Data frame including Norwegian municipality codes valid 2016.","code":""},{"path":"https://amslala.github.io/regtools/reference/kommuner_2016.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Norwegian municipalities valid in 2016 — kommuner_2016","text":"","code":"kommuner_2016"},{"path":"https://amslala.github.io/regtools/reference/kommuner_2016.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Norwegian municipalities valid in 2016 — kommuner_2016","text":"kommuner_2016 data frame 429 rows 2 columns: code Code municipality (2016) name Name municipality","code":""},{"path":"https://amslala.github.io/regtools/reference/kommuner_2016.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Norwegian municipalities valid in 2016 — kommuner_2016","text":"Code used simulate dataset can found /data-raw directory","code":""},{"path":"https://amslala.github.io/regtools/reference/linked_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example linked individual-level data — linked_df","title":"Example linked individual-level data — linked_df","text":"simulated dataset including individual information unique ID, ICD-10 diagnosis date (year), year birth, reason immigration","code":""},{"path":"https://amslala.github.io/regtools/reference/linked_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example linked individual-level data — linked_df","text":"","code":"linked_df"},{"path":"https://amslala.github.io/regtools/reference/linked_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example linked individual-level data — linked_df","text":"linked_df data frame 30,024 rows 3 columns: id Unique personal identifier code ICD-10 codes diag_year Year diagnosis sex Sex (code) y_birth Year birth innvandringsgrunn Reason immigration (https://www.ssb./klass/klassifikasjoner/355)","code":""},{"path":"https://amslala.github.io/regtools/reference/linked_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example linked individual-level data — linked_df","text":"Code used simulate dataset can found /data-raw directory","code":""},{"path":"https://amslala.github.io/regtools/reference/link_diag_demo.html","id":null,"dir":"Reference","previous_headings":"","what":"Link diagnostic and demographic datasets using unique personal identifiers — link_diag_demo","title":"Link diagnostic and demographic datasets using unique personal identifiers — link_diag_demo","text":"Link diagnostic demographic datasets using unique personal identifiers","code":""},{"path":"https://amslala.github.io/regtools/reference/link_diag_demo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Link diagnostic and demographic datasets using unique personal identifiers — link_diag_demo","text":"","code":"link_diag_demo(   data_diag,   data_demo_inv = NULL,   data_demo_var = NULL,   id_col = \"id\",   date_col = \"year\",   log_path = NULL )"},{"path":"https://amslala.github.io/regtools/reference/link_diag_demo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Link diagnostic and demographic datasets using unique personal identifiers — link_diag_demo","text":"data_diag data frame containing pre-processed pre-validated diagnostic data. data_demo_inv data frame containing validated time-invariant demographic data. data_demo_var data frame containing validated time-variant demographic data. id_col character string. Name ID (unique personal identifier) column provided datasets. Default \"id\". date_col character string. Name  date column time-variant data diagnostic data. log_path character string. Path log file append function logs. Default NULL. NULL, new directory /log file created current working directory.","code":""},{"path":"https://amslala.github.io/regtools/reference/link_diag_demo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Link diagnostic and demographic datasets using unique personal identifiers — link_diag_demo","text":"Linked dataset including relevant diagnostic demographic variables.","code":""},{"path":"https://amslala.github.io/regtools/reference/link_diag_demo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Link diagnostic and demographic datasets using unique personal identifiers — link_diag_demo","text":"","code":"# Link diagnostic and time invariant datasets log_file <- tempfile() cat(\"Example log file\", file = log_file)  linked_diag_inv <- link_diag_demo(data_diag = diag_df,                                   data_demo_inv = invar_df,                                   id_col = \"id\",                                   log_path = log_file) #> Joining diagnostic data with time-invariant demographic data... #> ✔ Datasets succesfully linked: diag_df, invar_df #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ After joining added 3 columns to 'diag_df': sex, y_birth, and innvandringsgrunn #> ℹ Rows in 'diag_df': 120256 #> ℹ Rows in 'invar_df': 30024 #> ✔ Total matched rows: 120256  # Link diagnostic and time variant datasets names(var_df)[names(var_df) == 'year_varying'] <- 'year' names(diag_df)[names(diag_df) == 'diag_year'] <- 'year'  linked_diag_var <- link_diag_demo(data_diag = diag_df,                                   data_demo_var = var_df,                                   id_col = \"id\",                                   date_col = \"year\",                                   log_path = log_file) #> Joining with time-variant demographic data... #> ✔ Datasets succesfully linked: diag_df, var_df #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ After joining added 1 columns to 'diag_df': varying_code #> ℹ Rows in 'diag_df': 120256 #> ℹ Rows in 'var_df': 270216 #> ✔ Total matched rows: 120256  # Link diagnostic, time invariant and variant datasets linked_diag_inv_var <- link_diag_demo(data_diag = diag_df,                                       data_demo_var = var_df,                                       data_demo_inv = invar_df,                                       id_col = \"id\",                                       date_col = \"year\",                                       log_path = log_file) #> Joining diagnostic data with time-invariant demographic data... #> ✔ Datasets succesfully linked: diag_df, invar_df #> Joining with time-variant demographic data... #> ✔ Datasets succesfully linked: diag_df, invar_df, var_df #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #> ℹ After joining added 4 columns to 'diag_df': sex, y_birth, innvandringsgrunn, and varying_code #> ℹ Rows in 'diag_df': 120256 #> ℹ Rows in 'var_df': 270216 #> ℹ Rows in 'invar_df': 30024 #> ✔ Total matched rows: 120256"},{"path":"https://amslala.github.io/regtools/reference/plot_rates.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot prevalence/incidence rates — plot_rates","title":"Plot prevalence/incidence rates — plot_rates","text":"plot_rates() plots prevalence/incidence rates","code":""},{"path":"https://amslala.github.io/regtools/reference/plot_rates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot prevalence/incidence rates — plot_rates","text":"","code":"plot_rates(   data,   date_col = \"date\",   rate_col,   grouping_var = NULL,   facet_var = NULL,   plot_type = c(\"line\", \"bar_chart\", \"lollipop\", \"jitter\"),   percent = TRUE,   palette = c(\"fhi_colors\", \"viridis\", \"okabe_ito\"),   single_color = \"black\",   annotated_line = NULL,   CI_lower = NULL,   CI_upper = NULL,   plot_title = \"\",   x_name = \"\",   y_name = \"\",   legend_title = \"\",   coord_flip = FALSE,   start_end_points = FALSE,   interactive = FALSE )"},{"path":"https://amslala.github.io/regtools/reference/plot_rates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot prevalence/incidence rates — plot_rates","text":"data data frame prevalence/incidence rates auxiliary information. date_col character string. Name  date column data. Default \"date\". rate_col character string. Name  rate column data. grouping_var character string. Name variable/column data used group rates. facet_var character string. Name  variable/column data used facet plots. plot_type character string. Type plot, options \"line\", \"bar_chart\", \"lollipop\", \"jitter\" percent Logical. want axis percent? Default set TRUE. palette character string. Color palette used plots, options : \"fhi_colors\", \"viridis\", \"okabe_ito\" single_color character string. Single color applied plot. Default set \"black\" annotated_line Character string. Position annotated line. Default NULL. CI_lower character string. Name column containing lower confidence interval data. CI_upper character string. Name column containing upper confidence interval data. plot_title Character string. Title plot. x_name character string. Title x axis. y_name character string. Title y axis. legend_title character string. Title legend box. coord_flip Logical. Default set FALSE lollipop, bar charts jitter TRUE flips orientation plot. start_end_points Logical. Want annotate start end points line plot? Default set FALSE. TRUE, start end point line plot annotated corresponding numerical values. interactive Logical. want make plot interactive plotly? Default set FALSE.","code":""},{"path":"https://amslala.github.io/regtools/reference/plot_rates.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot prevalence/incidence rates — plot_rates","text":"ggplot object","code":""},{"path":"https://amslala.github.io/regtools/reference/plot_rates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot prevalence/incidence rates — plot_rates","text":"","code":"log_file <- tempfile() cat(\"Example log file\", file = log_file)  pop_df <- tidyr::expand_grid(year = 2012:2020,   sex = as.factor(c(0, 1)),   innvandringsgrunn = c(\"ARB\", \"UKJ\", \"NRD\")) |>     dplyr::mutate(population = floor(runif(dplyr::n(), min = 3000, max = 4000)))  linked_df <- linked_df |> dplyr::rename(\"year\"= \"diag_year\") #> Error in dplyr::rename(linked_df, year = \"diag_year\"): Can't rename columns that don't exist. #> ✖ Column `diag_year` doesn't exist.  prev_series <- regtools::calculate_prevalence_series(linked_df,   time_points = c(2012:2020),   id_col = \"id\",   date_col = \"year\",   pop_data = pop_df,   pop_col = \"population\",   grouping_vars = c(\"sex\", \"innvandringsgrunn\"),   only_counts = FALSE,   suppression = FALSE,   CI = TRUE,   CI_level = 0.95,   log_path = log_file) #> Computing prevalence rates/counts... #> Error in purrr::map(processed_time_points, function(time_p) {    regtools::calculate_prevalence(linked_data = linked_data,         id_col = id_col, date_col = date_col, pop_data = pop_data,         pop_col = pop_col, time_p = time_p, grouping_vars = grouping_vars,         only_counts = only_counts, suppression = suppression,         suppression_threshold = suppression_threshold, CI = CI,         CI_level = CI_level, log_path = log_path)}): ℹ In index: 1. #> Caused by error in `dplyr::filter()`: #> ℹ In argument: `.data[[\"year\"]] == time_p`. #> Caused by error in `.data[[\"year\"]]`: #> ! Column `year` not found in `.data`.  plot_rates(prev_series,  date_col = \"year\",  rate_col = \"prev_rate\",  plot_type = \"line\",  grouping_var = \"sex\",  facet_var = \"innvandringsgrunn\",  palette = \"fhi_colors\",  CI_lower = \"ci_results_lower\",  CI_upper = \"ci_results_upper\",  plot_title = \"Prevalence by sex and reason of immigration\",  x_name = \"Year\",  start_end_points = TRUE) #> Error: object 'prev_series' not found"},{"path":"https://amslala.github.io/regtools/reference/read_demo_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and validate the structure of demographic individual-level data — read_demo_data","title":"Read and validate the structure of demographic individual-level data — read_demo_data","text":"read_demo_data() validates general structure minimum column requirements demographic individual-level data. input data sets must CSV, RDS, RDA .SAV files.","code":""},{"path":"https://amslala.github.io/regtools/reference/read_demo_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and validate the structure of demographic individual-level data — read_demo_data","text":"","code":"read_demo_data(   file_path,   data_type = c(\"t_variant\", \"t_invariant\"),   id_col = \"id\",   date_col = \"date\",   log_path = NULL,   ... )"},{"path":"https://amslala.github.io/regtools/reference/read_demo_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and validate the structure of demographic individual-level data — read_demo_data","text":"file_path character string. File path demographic data read. Supports CSV, RDS, RDA .SAV files. data_type character string. Demographic data can either type \"t_variant\" \"t_invariant\", necessary check correct data structure characteristics. id_col character string. Name ID column data set. Default \"id\". date_col character string. Name date column data set, default \"date\". log_path character string. Path log file append function logs. Default NULL. NULL, new directory /log file created current working directory. ... Additional arguments passed methods underlying functions.","code":""},{"path":"https://amslala.github.io/regtools/reference/read_demo_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and validate the structure of demographic individual-level data — read_demo_data","text":"data frame validated minimum requirements demographic data.","code":""},{"path":"https://amslala.github.io/regtools/reference/read_demo_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and validate the structure of demographic individual-level data — read_demo_data","text":"","code":"# Read and validate CSV file for varying individual level demographic data demo_csv <- system.file(\"extdata\", \"invar_data.csv\", package = \"regtools\") log_file <- tempfile() cat(\"Example log file\", file = log_file)  demo_data_validated <- read_demo_data(demo_csv, data_type = \"t_invariant\", id_col = \"id\", log_path = log_file) #>  #> Reading C:/Users/ALMS/AppData/Local/Temp/RtmpQPLB28/temp_libpath4db41d1260d2/regtools/extdata/invar_data.csv file... #> ✔ Succesfully read file: C:/Users/ALMS/AppData/Local/Temp/RtmpQPLB28/temp_libpath4db41d1260d2/regtools/extdata/invar_data.csv #> Checking column requirements: #> ✔ ID column #> ✔ Date column #>  #> Data type: time invariant. Checking requirements... #> ✔ No duplicate IDs #>  #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Demographic dataset succesfully read and columns validated #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ℹ Number of rows: 30024. Number of columns: 4. #> ℹ Unique IDs in dataset: 30024. #>  #> 'data.frame':\t30024 obs. of  4 variables: #>  $ id               : chr  \"P000000037\" \"P000000052\" \"P000000059\" \"P000000111\" ... #>  $ sex              : int  0 0 0 1 1 0 1 0 0 0 ... #>  $ y_birth          : int  2008 2000 2007 2003 2000 2003 2009 2005 2004 2002 ... #>  $ innvandringsgrunn: chr  \"FAMM\" \"FAMM\" \"FAMM\" \"FAMM\" ..."},{"path":"https://amslala.github.io/regtools/reference/read_diag_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and validate the structure of diagnostic data — read_diag_data","title":"Read and validate the structure of diagnostic data — read_diag_data","text":"read_diag_data() validates general structure minimum column requirements diagnostic data. input data sets must CSV, RDS, RDA .SAV files.","code":""},{"path":"https://amslala.github.io/regtools/reference/read_diag_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and validate the structure of diagnostic data — read_diag_data","text":"","code":"read_diag_data(   file_path,   id_col = \"id\",   date_col = \"date\",   code_col = \"code\",   log_path = NULL,   remove_extra = FALSE,   ... )"},{"path":"https://amslala.github.io/regtools/reference/read_diag_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and validate the structure of diagnostic data — read_diag_data","text":"file_path character string. File path diagnostic data read. Supports CSV, RDS, RDA .SAV files. id_col character string. Name ID column data set, default \"id\". date_col character string. Name date column data set, default \"date\". code_col character string. Name diagnostic codes column data set, default \"code\". log_path character string. Path log file append function logs. Default NULL. NULL, new directory /log file created current working directory. remove_extra Logical. TRUE, removes extra columns beside id, date diagnostic code. Default FALSE. ... Additional arguments passed methods underlying functions.","code":""},{"path":"https://amslala.github.io/regtools/reference/read_diag_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and validate the structure of diagnostic data — read_diag_data","text":"data frame validated minimum requirements diagnostic data","code":""},{"path":"https://amslala.github.io/regtools/reference/read_diag_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read and validate the structure of diagnostic data — read_diag_data","text":"","code":"# Read and validate CSV file for diagnostic individual level data. log_file <- tempfile() cat(\"Example log file\", file = log_file)  diag_csv <- system.file(\"extdata\", \"diag_data.csv\", package = \"regtools\")  diag_data_validated <- read_diag_data(diag_csv,   id_col = \"id\",   date_col = \"diag_year\",   log_path = log_file) #> Reading C:/Users/ALMS/AppData/Local/Temp/RtmpQPLB28/temp_libpath4db41d1260d2/regtools/extdata/diag_data.csv file... #> ✔ Succesfully read file: C:/Users/ALMS/AppData/Local/Temp/RtmpQPLB28/temp_libpath4db41d1260d2/regtools/extdata/diag_data.csv #> Checking column requirements: #> ✔ ID column #> ✔ Code column #> ✔ Date column #>  #>  #> ──────────────────────────────────────────────────────────────────────────────── #> Diagnostic dataset succesfully read and columns validated #>  #>  #> ── Data Summary ──────────────────────────────────────────────────────────────── #>  #> ℹ Number of rows: 120256. Number of columns: 3. #>  #>  #> 'data.frame':\t120256 obs. of  3 variables: #>  $ id       : chr  \"P000000704\" \"P000000704\" \"P000000704\" \"P000000704\" ... #>  $ code     : chr  \"F4522\" \"F305\" \"F65\" \"F840\" ... #>  $ diag_year: int  2016 2020 2014 2017 2014 2017 2018 2020 2016 2013 ..."},{"path":"https://amslala.github.io/regtools/reference/regtools-package.html","id":null,"dir":"Reference","previous_headings":"","what":"regtools: An R package to aid the analysis of Norwegian individual-level health and sociodemographic data. — regtools-package","title":"regtools: An R package to aid the analysis of Norwegian individual-level health and sociodemographic data. — regtools-package","text":"R package support research activities utilizing Norwegian health records prevalence trend analysis mental health diagnoses Norway.","code":""},{"path":[]},{"path":"https://amslala.github.io/regtools/reference/regtools-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"regtools: An R package to aid the analysis of Norwegian individual-level health and sociodemographic data. — regtools-package","text":"Maintainer: Alejandra Martinez Sanchez contributors: Johanne Pettersen Helga Ask Alexandra Havdahl Laurie Hannigan","code":""},{"path":"https://amslala.github.io/regtools/reference/simulate_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create simulated diagnostic, time-varying and time-unvarying individual level data — simulate_data","title":"Create simulated diagnostic, time-varying and time-unvarying individual level data — simulate_data","text":"#' @description simulate_data() function creates individual-level data sets. simulates structure diagnostic, time-varying time-unvarying data might commonly encounter working Norwegian medical sociodemographic data (e.g. NPR SSB)","code":""},{"path":"https://amslala.github.io/regtools/reference/simulate_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create simulated diagnostic, time-varying and time-unvarying individual level data — simulate_data","text":"","code":"simulate_data(   population_size,   prefix_ids,   length_ids,   family_codes,   pattern = c(\"increase\", \"decrease\", \"random\"),   prevalence = NULL,   diag_years,   incidence = NULL,   sex_vector,   y_birth,   filler_codes,   filler_y_birth,   unvarying_queries = NULL,   unvarying_codes = NULL,   unvarying_codes_filler,   varying_query = NULL,   varying_codes = NULL,   filler_varying_codes = NULL,   date_classifications = NULL )"},{"path":"https://amslala.github.io/regtools/reference/simulate_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create simulated diagnostic, time-varying and time-unvarying individual level data — simulate_data","text":"population_size integer. Number total population size (individual). prefix_ids character string. Prefix used construct unique IDs. Default \"P000\". length_ids integer. Total character length ID. Default 6. family_codes character vector. Relevant ICD-10 diagnostic codes family codes. Example: family_codes = c(\"F84\", \"G\") pattern character string. Pattern incidence prevalence rates simulated data. Possible options \"increase\", \"decrease\" \"random\". prevalence numeric value 0 1. Prevalence rate expressed proportion. diag_years numeric vector. Years used relevant diagnostic years. incidence numeric value 0 1. Incidence rate expressed proportion. sex_vector factor character vector. Factors used represent sex simulated data sets. y_birth numeric vector. Years used relevant years birth. filler_codes character vector. ICD-10 diagnostic codes family codes used fillers. Example: filler_codes = c(\"R\", \"P20\") filler_y_birth numeric vector. Years used filler years birth. unvarying_queries character vector. Uses Statistics Norway API retrieve desired unvarying variable classification(s). Example: unvarying_queries = c(\"innvandringsgrunn\") unvarying_codes Data frame named list. Codes used relevant unvarying codes dataset. data frame provided, column names considered names unvarying variables. named list provided, name element consider unvarying variable name. Example: unvarying_codes = list(\"innvandringsgrunn\" = c(\"ARB\", \"NRD\", \"UKJ\"), \"blodtype\" = c(\"\", \"B\", \"AB\", \"O\")) unvarying_codes_filler Data frame named list. Codes used filler unvarying codes dataset. varying_query character string. Uses Statistics Norway API retrieve desired varying variable classification(s). Example: varying_query = c(\"sivilstand\") varying_codes character vector. Codes used relevant varying codes dataset. Example: varying_codes = .character(0:4) filler_varying_codes character vector. Codes used filler varying codes dataset. Example: filler_varying_codes = .character(5:9) date_classifications Date used retrieve classification system SSB. Format must \"yyyy-mm-dd\"","code":""},{"path":"https://amslala.github.io/regtools/reference/simulate_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create simulated diagnostic, time-varying and time-unvarying individual level data — simulate_data","text":"Named list containing data frames individual level diagnostic sociodemographic data.","code":""},{"path":"https://amslala.github.io/regtools/reference/simulate_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create simulated diagnostic, time-varying and time-unvarying individual level data — simulate_data","text":"","code":"simulated_list <- simulate_data(   population_size = 1000,   prefix_ids = \"P000\",   length_ids = 6,   family_codes = c(\"F45\", \"F84\"),   pattern = \"increase\",   prevalence = .023,   diag_years  = c(2012:2020),   sex_vector = c(0, 1),   y_birth = c(2010:2018),   filler_codes = \"F\",   filler_y_birth = c(2000:2009),  unvarying_codes = list(\"innvandringsgrunn\" = c(\"ARB\", \"NRD\", \"UKJ\")),   unvarying_codes_filler = list(\"innvandringsgrunn\" = c(\"FAMM\", \"UTD\")),   varying_query = \"fylke\" ) #>  #> ℹ Creating relevant cases with the following characteristics: #> • Population size = 1000 #> • Prefix IDs = P000 #> • Length IDs = 6 #> • ICD-10 relevant codes = F45 and F84 #> • Pattern of incidence = increase #> • Prevalence = 0.023 #> • Diagnostic years = 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, and 2020 #> • Incidence = #> • Coding sex = 0 and 1 #> • Relevant years of birth = 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, and #> 2018 #>  #> ℹ Creating filler cases with the following characteristics: #> • Filler ICD-10 codes = F #> • Filler years of birth = 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, #> and 2009 #> • Pattern for filler incidence = 'random' #> • Number of filler cases to generate = 977 #>  #> ! This process can take some minutes... #>  #> ✔ Succesfully generated diagnostic, time-varying and time-unvarying datasets!"},{"path":"https://amslala.github.io/regtools/reference/synthetic_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Create synthetic diagnostic, time-varying and time-invariant individual level data — synthetic_data","title":"Create synthetic diagnostic, time-varying and time-invariant individual level data — synthetic_data","text":"#' @description synthetic_data() function creates individual-level data sets. simulates structure diagnostic, time-varying time-invariant data might commonly encounter working Norwegian medical sociodemographic data (e.g. NPR SSB)","code":""},{"path":"https://amslala.github.io/regtools/reference/synthetic_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create synthetic diagnostic, time-varying and time-invariant individual level data — synthetic_data","text":"","code":"synthetic_data(   population_size,   prefix_ids,   length_ids,   seed = \"123\",   family_codes,   diag_code_type = \"icd\",   pattern = c(\"increase\", \"decrease\", \"random\"),   prevalence = NULL,   diag_years,   incidence = NULL,   sex_vector,   y_birth,   filler_codes,   filler_y_birth,   invariant_queries = NULL,   invariant_codes = NULL,   invariant_codes_filler,   varying_query = NULL,   varying_codes = NULL,   varying_codes_filler = NULL,   date_classifications = NULL )"},{"path":"https://amslala.github.io/regtools/reference/synthetic_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create synthetic diagnostic, time-varying and time-invariant individual level data — synthetic_data","text":"population_size integer. Number total population size (individual). prefix_ids character string. Prefix used construct unique IDs. Default \"P000\". length_ids integer. Total character length ID. Default 6. seed numerical value. Seed used ensure reproducible results. Default seed = 123 family_codes character vector. Relevant diagnostic (either ICD-10 ICPC-2 codes family codes. Example: family_codes = c(\"F84\", \"G\") diag_code_type character string. Desired code classification, options \"icd\" \"icpc\". Default \"icd\" pattern character string. Pattern incidence prevalence rates simulated data. Possible options \"increase\", \"decrease\" \"random\". prevalence numeric value 0 1. Prevalence rate expressed proportion. diag_years numeric vector. Years used relevant diagnostic years. incidence numeric value 0 1. Incidence rate expressed proportion. sex_vector factor character vector. Factors used represent sex simulated data sets. y_birth numeric vector. Years used relevant years birth. filler_codes character vector. Diagnostic codes family codes used fillers. Example: filler_codes = c(\"R\", \"P20\") filler_y_birth numeric vector. Years used filler years birth. invariant_queries character vector. Uses Statistics Norway API retrieve desired invariant variable classification(s). Example: invariant_queries = c(\"innvandringsgrunn\") invariant_codes Data frame named list. Codes used relevant invariant codes dataset. data frame provided, column names considered names invariant variables. named list provided, name element consider invariant variable name. Example: invariant_codes = list(\"innvandringsgrunn\" = c(\"ARB\", \"NRD\", \"UKJ\"), \"blodtype\" = c(\"\", \"B\", \"AB\", \"O\")) invariant_codes_filler Data frame named list. Codes used filler invariant codes dataset. varying_query character string. Uses Statistics Norway API retrieve desired varying variable classification(s). Example: varying_query = c(\"sivilstand\") varying_codes character vector. Codes used relevant varying codes dataset. Example: varying_codes = .character(0:4) varying_codes_filler character vector. Codes used filler varying codes dataset. Example: varying_codes_filler = .character(5:9) date_classifications Date used retrieve classification system SSB. Format must \"yyyy-mm-dd\"","code":""},{"path":"https://amslala.github.io/regtools/reference/synthetic_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create synthetic diagnostic, time-varying and time-invariant individual level data — synthetic_data","text":"Named list containing two lists. first list named 'datasets' includes data frames individual level diagnostic sociodemographic data. second list named 'metadata' includes exact function call arguments given user","code":""},{"path":"https://amslala.github.io/regtools/reference/synthetic_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create synthetic diagnostic, time-varying and time-invariant individual level data — synthetic_data","text":"","code":"simulated_list <- synthetic_data(   population_size = 1000,   prefix_ids = \"P000\",   length_ids = 6,   family_codes = c(\"F45\", \"F84\"),   pattern = \"increase\",   prevalence = .023,   diag_years  = c(2012:2020),   sex_vector = c(0, 1),   y_birth = c(2010:2018),   filler_codes = \"F\",   filler_y_birth = c(2000:2009),  invariant_codes = list(\"innvandringsgrunn\" = c(\"ARB\", \"NRD\", \"UKJ\")),   invariant_codes_filler = list(\"innvandringsgrunn\" = c(\"FAMM\", \"UTD\")),   varying_query = \"fylke\" ) #>  #> ℹ Creating relevant cases with the following characteristics: #> • Population size = 1000 #> • Prefix IDs = P000 #> • Length IDs = 6 #> • Diagnostic relevant codes = F45 and F84 #> • Pattern of incidence = increase #> • Prevalence = 0.023 #> • Diagnostic years = 2012, 2013, 2014, 2015, 2016, 2017, 2018, 2019, and 2020 #> • Incidence = #> • Coding sex = 0 and 1 #> • Relevant years of birth = 2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017, and #> 2018 #>  #> ℹ Creating filler cases with the following characteristics: #> • Filler diagnostic codes = F #> • Filler years of birth = 2000, 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, #> and 2009 #> • Pattern for filler incidence = 'random' #> • Number of filler cases to generate = 977 #>  #> ! This process can take some minutes... #>  #> ✔ Succesfully generated diagnostic, time-varying and time-invariant datasets!"},{"path":"https://amslala.github.io/regtools/reference/var_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Example time-variant individual-level data — var_df","title":"Example time-variant individual-level data — var_df","text":"simulated dataset including time-variant individual information year residence place residence (codes)","code":""},{"path":"https://amslala.github.io/regtools/reference/var_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example time-variant individual-level data — var_df","text":"","code":"var_df"},{"path":"https://amslala.github.io/regtools/reference/var_df.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example time-variant individual-level data — var_df","text":"var_df data frame 270,216 rows 3 columns: id Unique personal identifier code Code place residence (time varying) year Year residence","code":""},{"path":"https://amslala.github.io/regtools/reference/var_df.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example time-variant individual-level data — var_df","text":"Code used simulate dataset can found /data-raw directory","code":""}]
